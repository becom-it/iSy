@using EmployeeInfo.Extensions
@using EmployeeInfo.Models

@inject Microsoft.JSInterop.IJSRuntime jsRuntime
@inject EmployeeInfo.Services.IEmployeeService empService

<canvas id="@Id" class="org-chart" width="@Width" height="@Height" @ref="CanvasRef"></canvas>

@code {

    [Parameter]
    public LdapEmployee Employee { get; set; } = null;

    [Parameter]
    public EventCallback<LdapEmployee> EmployeeChanged { get; set; }

    public string Id { get; set; } = Guid.NewGuid().ToString();

    public long Height { get; set; } = 300;

    public long Width { get; set; } = 200;

    public ElementReference CanvasRef { get; set; }

    private EmployeeInfo.Services.CanvasClickInvoker clickInvoker;

    private bool isInitalized = false;

    protected override void OnInitialized()
    {
        clickInvoker = new Services.CanvasClickInvoker(async (path) =>
        {
            var emp = await empService.LoadEmployeeWithPath(path);
            await EmployeeChanged.InvokeAsync(emp);
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await initializeJs();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Employee != null)
        {
            var vm = new OrganigramViewModel();

            //Gibt es direct reports?
            if (Employee.DirectReports.Count() == 0)
            {
                vm.Manager = Employee.Manager.Manager;
                vm.Employee = Employee.Manager;
                vm.Employees = Employee.Manager.DirectReports;
            }
            else
            {
                vm.Manager = Employee.Manager;
                vm.Employee = Employee;
                vm.Employees = Employee.DirectReports;
            }

            await initializeJs();

            await jsRuntime.DrawOrg(vm);
        }
    }

    private async Task initializeJs()
    {
        if (isInitalized) return;
        await jsRuntime.InitializeOrgCanvas(Id, Microsoft.JSInterop.DotNetObjectReference.Create(clickInvoker));
        isInitalized = true;
    }
}