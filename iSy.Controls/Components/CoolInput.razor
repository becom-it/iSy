<div class="cool-input">
    <label>
        <input id="@Id" required @bind="BindingValue" @bind:event="oninput" type="@InputType" @onkeypress="keyDown"/>
        <span class="@(NoIcon == true ? "noicon" : "") placeholder">@Placeholder</span>
        @if (!NoIcon)
        {
            <i class="fa @FaIcon icon"></i>
        }
    </label>
</div>
@code {
    [Parameter]
    public string Placeholder { get; set; }

    private string _value;

    [Parameter]
    public string BindingValue
    {
        get => _value;
        set
        {
            if (_value == value) return;
            _value = value;
            BindingValueChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> BindingValueChanged { get; set; }

    [Parameter]
    public string FaIcon { get; set; } = "fa-user";

    [Parameter]
    public bool NoIcon { get; set; } = false;

    [Parameter]
    public string InputType { get; set; } = "text";

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public EventCallback<string> KeyboardKeyDown { get; set; }

    protected override void OnInitialized()
    {
        if(string.IsNullOrEmpty(Id))
        {
            Id = Guid.NewGuid().ToString();
        }
    }

    async Task keyDown(KeyboardEventArgs evt) {
        await KeyboardKeyDown.InvokeAsync(evt.Key);
    }
}
